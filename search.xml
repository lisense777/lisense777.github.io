<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>object-c语法学习</title>
      <link href="/2021/11/28/Objective-c/"/>
      <url>/2021/11/28/Objective-c/</url>
      
        <content type="html"><![CDATA[<h1 id="OC基本语法学习"><a href="#OC基本语法学习" class="headerlink" title="OC基本语法学习"></a>OC基本语法学习</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>char、int、float、double、<strong>BOOL（YES\NO）</strong></p><p>nil代表空值</p><p>在oc中的关键字添加@来区别</p><p>防止类名相同的情况通过添加前缀来解决：如NSString</p><p>输出方法：NSLog(@”hello”)或者NSLog(@”age is %i”,int)</p><blockquote><p>#import &lt;&gt; :引用系统文件，它用于对系统自带文件的引用，编译器会在系统文件目录下去查找该文件</p><p>#import “ “:引用用户自定义的文件，会先在用户目录下查找，再到安装目录去查找</p><p>使用#import有效地防止了头文件被重复引用；</p><p>而重复引用地后果可能是效率低下更严重者可能引起错误</p><p>比如相同地类不能定义两次</p></blockquote><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>声明：Student.h</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;//Foundatiooon内部的Foundation.h文件</span><br><span class="line">@interface Student : NSObject &#123;</span><br><span class="line">    //定义成员变量</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line">//age的get方法</span><br><span class="line">//在此处声明的方法都是公有方法</span><br><span class="line">//用类名调用的静态方法 +</span><br><span class="line">//用对象调动的动态方法 -</span><br><span class="line">- (int)getAge;</span><br><span class="line">//一个冒号对应一个参数</span><br><span class="line">- (void)setAge:(int)newAge;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><hr><p>实现：Student.m</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;Student.h&quot;</span><br><span class="line">@implementation Student</span><br><span class="line">- (int)getAge &#123;</span><br><span class="line">    return age;//成员变量</span><br><span class="line">&#125;</span><br><span class="line">- (void)setAge:(int)newAge &#123;</span><br><span class="line">    //newAge是传进来的参数，设置成员变量中的age = 传进来的这个参数</span><br><span class="line">    age = newAge;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Student.h&quot;</span><br><span class="line">int main(int argc,const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        //创建一个Sudent对象</span><br><span class="line">        //1.调用一个静态方法alloc分配内存</span><br><span class="line">        Student* stu = [Student alloc];</span><br><span class="line">        //2.初始化 init动态方法</span><br><span class="line">        //发送init信号到stu所指向的内存区域进行初始化</span><br><span class="line">        stu = [stu init];</span><br><span class="line">        //合并的初始化方法</span><br><span class="line">        Student *stu = [[Student alloc] init];</span><br><span class="line">        //调用方法</span><br><span class="line">        [stu setage:100];</span><br><span class="line">        int age = [stu getAge];</span><br><span class="line">        //释放对象</span><br><span class="line">        [stu release];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数传参时两个参数的方法</p><p>方法名是要包含冒号的，</p><p>如一个参数时方法名是 setAge:  两个参数时方法名是setAge:andno:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)setAge:(int)newAge andno:(int)newno;</span><br><span class="line"></span><br><span class="line">//实现</span><br><span class="line">- (void)setAge:(int)newAge andno:(int)newnp &#123;</span><br><span class="line">    age = newage;</span><br><span class="line">    no = newno;</span><br><span class="line">&#125;</span><br><span class="line">//主函数</span><br><span class="line">//调用这个方法</span><br><span class="line">[stu setage:15 andno:14]</span><br><span class="line">NSLog(@&quot;age is %i,no is %i&quot;,[stu getage],[stu getno]);</span><br></pre></td></tr></table></figure><h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><blockquote><p>注意在oc中调用类方法不同于C++；</p><p>比如对象stu 有两个方法：setAge:和age方法</p><p>则：[stu setAge:10]   int age = [stu age];</p></blockquote><p>由于面向对象的语言在类中都可以通过点方法来调用类方法</p><p>在oc中也有点语法，但区别于Java、c++</p><p><strong>记住  点语法会帮助展开是类方法而不是直接访问成员变量</strong></p><p>如果把成员变量换成_age,stu.age仍然正确；因为它会自动展开对象的类方法（setter方法和getter方法）stu. _age则会报错  无法展开类方法（标准格式的setter方法和getter方法用的就是age和setAge：作为方法名）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//此处点语法的使用并不是访问成员变量而是调用类方法</span><br><span class="line">//具体方法视情况而定，</span><br><span class="line">//如果点方法在等号的左边说明调用set方法</span><br><span class="line">//如果点方法在右边说明是赋值则调用的get方法</span><br><span class="line">stu.age = 10;//调用setage：</span><br><span class="line">//等同于[stu age:10];</span><br><span class="line">int age = stu.age;//调用age方法</span><br><span class="line">//等同于int age = [stu age]</span><br></pre></td></tr></table></figure><p>判断是调用了set方法还是get方法</p><p>主要看是想读还是想写这个成员变量</p><p>想读age就是get方法，写age就是改变age就是set方法</p><p>无论self.age = newage还是return self.age都会导致无限调用自身的方法导致死循环</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//成员变量为_age,_no;</span><br><span class="line">- (id)initWithAge:(int)age andNo:(int)no;</span><br><span class="line">//实现</span><br><span class="line">- (id)initWithAge:(int)age andNo:(int)no &#123;</span><br><span class="line">    self = [super init];//出错可能为空</span><br><span class="line">    if(self != nil)&#123;</span><br><span class="line">         _age = age;</span><br><span class="line">        _no = no;</span><br><span class="line">    &#125;</span><br><span class="line">//或</span><br><span class="line">    //注意此时的条件句中是赋值不是等于</span><br><span class="line">    //相当于if(self != nil)</span><br><span class="line">    //if(self)   self==nil不执行  self != nil执行</span><br><span class="line">    if(self = [super init]) &#123;</span><br><span class="line">        _age = age;</span><br><span class="line">        _no = no;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>oc中打印一个对象 NSLog（@“%@”，stu）打印内存地址</p><p>//重写父类的description方法</p><p>//用 <strong>“%@”打印对象</strong>的时候会调用description方法</p><p>可以在调试的时候重写description方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (NSString *)description &#123;</span><br><span class="line">    //拼接字符串  未用NSLog打印%@</span><br><span class="line">    NSString *str = [NSString stringWithFormat:@&quot;age is %i and no is %i&quot;,_age,_no];</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>@public ：全局可以访问</p><p>@protected：类的内部和子类可以访问</p><p>@private： 类的内部可以访问</p><p>变量必须定义在{ }中</p><p>变量默认@protected</p><p>方法默认公有方法</p><p>在.h文件中声明的方法是公有方法</p><p>在.m文件中直接实现且在.h文件未声明的方法就是私有方法 </p><p>在动态方法时 self指的就是调用这个方法的对象</p><p>在静态方法时  self指的就是类名</p><h2 id="property和-synthesize"><a href="#property和-synthesize" class="headerlink" title="@property和@synthesize"></a>@property和@synthesize</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在.h文件中由于可能会有很多成员变量需要getter和setter方法</span><br><span class="line">//设定类成员变量为_age和_no</span><br><span class="line">@property int age;</span><br><span class="line">@property int no;</span><br><span class="line">//相当于</span><br><span class="line">- (void)setAge:(int)age;</span><br><span class="line">- (int)age;</span><br><span class="line">//在.m文件中</span><br><span class="line">@synthesize age = _age;</span><br><span class="line">@synthesize no = _no;</span><br><span class="line">//等同于</span><br><span class="line">- (void)setAge:(int)age &#123;</span><br><span class="line">    _age = age;</span><br><span class="line">&#125;</span><br><span class="line">- (int)age &#123;</span><br><span class="line">    return _age;</span><br><span class="line">&#125;</span><br><span class="line">//编译器只会按照这种标准的格式来展开代码   如果有其他需求在具体的实现方法还是得自己编写</span><br><span class="line">// 还有一点值得注意  就是在synthesize中，如果后面跟的property变量名并没有存在于原来的成员变量名的时候  编译器会自动生成一个私有变量到类中</span><br><span class="line">//在xcode4.5以上  synthesize也可以省略 在编译器会自动有getter和setter方法的实现</span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理***"></a>内存管理***</h2><h3 id="基本内存管理"><a href="#基本内存管理" class="headerlink" title="基本内存管理"></a>基本内存管理</h3><blockquote><p>对于基本类型，操作系统会进行回收</p><p>但是对于任意copy、new、alloc创建的对象都需要手动释放</p><p>每一个对象的内部都有一个引用计数器，初次被创建时都为1</p><p>给对象发送一条retain消息时，引用计数器+1；</p><p>给对象发送一条release消息时，引用计数器-1</p><p>引用计数为0的时候被销毁，会调用dealloc方法，释放相关资源一般自己重写dealloc方法，不要直接调用dealloc方法</p><p>retainCoount 获得当前引用计数</p><p>野指针;访问了<strong>不属于自己的</strong>内存</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//检验对象是否被回收 重写dealloc方法</span><br><span class="line">- (void) dealloc &#123;</span><br><span class="line">    [super dealloc];//一般放到最后写</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">//给某个对象添加autorelease</span><br><span class="line">Student *stu = [[[Student alloc] init] autorelease];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象之间的内存管理"><a href="#对象之间的内存管理" class="headerlink" title="对象之间的内存管理"></a>对象之间的内存管理</h3><blockquote><p>xcode 注释方法： #pragma mark    方便查阅（给某一个方法取名）</p><p>#pragma mark <strong>-</strong>  （给某些方法分组）</p></blockquote><p>在oc中  nil release不会报错</p><p>整体的内存管理还是得视情况来定：个人总结以下几点</p><p>1.谁创建谁释放     标准内存管理方式就应该由谁创建的谁去释放，在多人编码的情况下  这样可以很好地防止多次释放等一系列内存泄漏的问题</p><p>2.对于对象与对象之间的内存管理机制，必须要确定最后的对象引用计数为0，</p><p>3.如果在一个类中需要用到另一个类中的成员这种情况，导致无法拿到正确的对象或者是释放问题的出现，<strong>因为每次销毁某个对象时会进入到类的dealloc方法种，我们可以重写dealloc方法，在dealloc方法中添加一次release或者retain</strong>总之最终目的都是确定最后的对象的引用计数置为0就ok。<strong>如果有需要的话可以自己重写set方法或者get方法来满足我们的最终目的</strong>，最好在每一次的setter方法中进行一次判断  写小段代码供自己理解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)setBook:(book *)book &#123;</span><br><span class="line">    //先确定不是上一次的book1  而是新的book2调用了这个方法  再给他引用计数加个1；</span><br><span class="line">    //防止点语法使用造成内存泄漏</span><br><span class="line">    if(_book != book) &#123;</span><br><span class="line">        //先释放旧的成员变量</span><br><span class="line">        [_book release];</span><br><span class="line">        //再retain新传进来的对象</span><br><span class="line">        _book = [book retain];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.释放release和retain顺序也得根据自己的需求来写  顺序错误也很大概率会造成内存泄漏   很难发现错误</p><p>多次释放会发生野指针错误  </p><h3 id="property参数"><a href="#property参数" class="headerlink" title="@property参数"></a>@property参数</h3><p>由于编译器自带的方法展开不帮我们进行内存管理，所以我们可以添加一些参数 系统就会自动帮我们填充带有内存管理的set方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@class Book;</span><br><span class="line">@class Card;</span><br><span class="line">@interface Student : NSObject</span><br><span class="line">    //retain代表release旧值 retain新值</span><br><span class="line">@property (retain) Book *book;</span><br><span class="line">//对应的set方法如下</span><br><span class="line">//- (void)setBook(Book*)book &#123;</span><br><span class="line">//    if(_book != book) &#123;</span><br><span class="line">//        [_book release];</span><br><span class="line">//        _book = [book retain];</span><br><span class="line">//    &#125;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">@property (retain) Card *card;</span><br><span class="line">@end</span><br><span class="line">//@property的参数大致分为三类</span><br><span class="line">// 读写属性：read write/readonly</span><br><span class="line">// setter处理：assign/retain/copy</span><br><span class="line">// 原子性：atomic/nonatomic</span><br></pre></td></tr></table></figure><p>@property (readonly) int age;//只可读 只生成get方法</p><p>@property (readwrite) int age;//默认可读可写</p><p>setter处理：</p><p>assign/retain/copy    默认assign不带内存管理的</p><p>原子性：</p><p>默认atomic（多线程安全，加锁了）<strong>执行慢</strong></p><p>@property (nonatomic)  ;代表不需要加锁也就禁止多线程了</p><p><strong>执行快</strong></p><p>//以下为不加锁带内存管理的成员变量声明 会默认实现set和get方法</p><p>@property (nonatomic,retain) Book *book;</p><blockquote><p>@property(noonatomic,getter = method,setter = method);</p><p>以上是修改get和set方法名的方法</p></blockquote><h3 id="auto-release-pool"><a href="#auto-release-pool" class="headerlink" title="auto release pool"></a>auto release pool</h3><p><strong>自动释放池</strong>：OC中的一种内存自动回收机制，一般可以将一些变量添加到自动释放池，统一回收释放</p><p>自动释放池销毁时，池里面的所有对象都会调用一次release方法</p><p><strong>原理</strong>：OC对象只需要发送一条autrelease消息，就会把这个对象添加到最近的自动释放池， 栈顶。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;student.h&gt;</span><br><span class="line">int main (int argc,const char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    //代表创建一个自动释放池</span><br><span class="line">    //当自动释放池被销毁的时候会调用一次release 延时释放</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Student *stu = [[Student alloc] init];</span><br><span class="line">        [stu autorelease];//添加到auto releasepool</span><br><span class="line">        //简写</span><br><span class="line"> Student *stu = [[[Student alloc] init] autorelease];</span><br><span class="line">        Student *stu1 = [[Student alloc] init];</span><br><span class="line">        [stu1 autorelease];</span><br><span class="line">    &#125;</span><br><span class="line">    //另一个自动释放池</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">         Student *stu2 = [[Student alloc] init];</span><br><span class="line">          [stu2 autorelease];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>静态方法（+）访问不了成员变量    self在静态方法中指向调用这个方法的类名</strong></p><p>不要把大量循环操作放到一个autoreleasepool中之间，造成内存峰值上升</p><p>避免对大内存使用这种延迟释放机制</p><p>sdk中一般利用静态方法创建的对象都是已经auto release的不需要进行release操作</p><p>eg：[NSNumber numberWithInt:10]不需要release</p><p>[[NSNumber alloc] intitWithInt:10]c创建的对象需要release</p><h2 id="class关键字"><a href="#class关键字" class="headerlink" title="@class关键字"></a>@class关键字</h2><p>由于在开发过程中 可能会频繁地引入其他类的头文件，但是实际上我们需要的只是知道这个name是一个类就可以   但是引入其他类的头文件就会把引入类的getter和setter等方法全部引入；这就会造成性能方面的问题</p><p>这时候我们只需要用关键字@class + name  表明这个name是一个类就ok 并不妨碍正常运行。</p><p>如果多个文件import一个头文件，那么这个头文件一旦出现改动，那么所有引入了这个头文件的的文件全都得重新编译，效率可想而知。</p><p><strong>所以</strong> 一般情况我们在头文件写声明的时候直接@class + name；</p><p>但是在实现的.m文件中我们就需要引入name.h了，否则我们根本不知道name类里边儿的成员方法</p><blockquote><p>在一些特殊情况下只能用@class name；而不能import name.h</p><p>比如，在A类中import B.h   在B类中import A.h 这种包含关系的两个类就只能使用@class 来声明name是个类</p></blockquote><p>1.如果是继承某个类，就需要导入这个类的头文件</p><p>2.如果只是定义成员变量、属性（@property）就用@class；</p><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>OC中提供的一种在不改变类的前提下 动态的为已经存在的类添加新方法</p><p>可以保证原始设计类的规模小，在需要到类方法的时候在进行动态的添加新方法</p><p>添加方法：在Object-cFile中找到Category后，再选择自己要为那个类添加分类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;teacher.h&quot;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line">//（）代表分类   test代表分类的名称</span><br><span class="line">    //不可以在分类中添加成员变量，只能添加方法</span><br><span class="line">@interface teacher (test)</span><br><span class="line">- (void) test;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以给系统自带的类添加分类方法</p><p><strong>也可以直接在原来的类中添加interface  直接添加分类</strong></p><blockquote><p>@interface techer (test);</p><p>-(void)test;</p><p>@end</p><hr><p>@implementation teacher(test) </p><p>-(void)test{</p><p>NSLog(@”…”);</p><p>}</p><p>@end</p></blockquote><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>简单来说就是一系列方法的列表，其中声明的方法可以被任何类来实现</p><p><strong>下面以为button设定一个监听器的思想了解protocol</strong></p><p><strong>首先想充当button的监听器的前提就是这个监听器必须实现button的一个协议===也就是button和这个监听器都得实现一个共同的协议</strong></p><p>接下来思想就是  在button里边儿实现一个ButtonDelegate协议后；</p><p>再在button这个类里边儿创建一个监听器同时这个监听器也必须得实现这个ButtonDelegate协议</p><p><img src="/2021/11/28/Objective-c/1639208453974.png" alt="1639208453974"></p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import&lt;Foundation/Foundation.h&gt;</span><br><span class="line">//&lt;&gt;代表实现某个协议</span><br><span class="line">//声明的ButtonDelegate已经默认实现了最根本的NSObject协议</span><br><span class="line">@protocol ButtonDelegate &lt;NSObject&gt;</span><br><span class="line">- (void)onClick;</span><br><span class="line">@end</span><br><span class="line">@interface Button:NSObject</span><br><span class="line">//设定delegate这个监听器对象  且能充当button的监听器必须实现ButtonDelegate这个协议</span><br><span class="line">@property (nonatomic,retain) id&lt;ButtonDelegate&gt; delegate;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>释放的时候也得释放_delegate才不会有内存泄漏</p><p>再了解下主函数实现按钮点击后续</p><p>实现协议且实现协议里边儿方法的对象才能充当监听器</p><p><strong>listener里边儿得实现ButtonDelegate协议</strong></p><p>@interface Listener  ：NSObject<ButtonDelegate>;</ButtonDelegate></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//main函数</span><br><span class="line">//Listenner 是一个普通的类</span><br><span class="line">int main(int argc,const char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    Button *button = [[[Button alloc] init] autorelease];</span><br><span class="line">    Listener *listener = [[[Listener alloc] init] autorelease];</span><br><span class="line">    button.delegate = listener;//设定button的监听器</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@protocol   也可以使用来提前声明这是一个协议和@class用途一致提高性能</p><p>还需要注意的几点</p><p>1.对于监听器的设定应该在每次触发onClik的时候传一个button*对象，以此来确定哪一个按钮被点击了</p><p>2.再OC中可以确定一个对象是否有这个方法  会返回 YES/NO</p><p>如：if([_delegate respondsToSelector:@selector(onClic:)]) {</p><p>[_delegate onClic: self]//注意方法名后要加   “:”</p><p>}</p><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>Block封装了一段代码，可以在任何时候执行</p><p>Block可以作为函数参数或者函数的返回值，而其本身可以带输入参数或返回值，它和传统函数指针很像，但又有区别，block时inline的，默认情况下它对局部变量是只读的</p><p>Block的声明方法</p><p>int  (^Sum) (int,int) = ^(int a,int b) {</p><p>​     return a+b;</p><p>};</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef ^(Mysum) (int,int);//声明了一个block block名称为Mysum，类型（int，int）</span><br><span class="line">void test()&#123;</span><br><span class="line">    //声明了一个block变量</span><br><span class="line">    Mysum sum = ^(int a,int b) &#123;</span><br><span class="line">        return a+b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">//block可以访问外面定义的变量 但是只读不能写</span><br><span class="line">//__block int c  如此定义的外部变量在block内部是可以修改的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Objective-c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中删除重复元素</title>
      <link href="/2021/11/26/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>/2021/11/26/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目描述： 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</p><p>返回同样按升序排列的结果链表。</p></blockquote><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,3,4,4,5]</span><br><span class="line">输出：[1,2,5]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//使用pre记录前一个需要被保留下来的元素  </span></span><br><span class="line">    <span class="comment">//使用cur记录当前元素</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)<span class="keyword">return</span> head;<span class="comment">//只有一个元素 或者链表为空</span></span><br><span class="line">        ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        res-&gt;next = head;<span class="comment">//返回结点</span></span><br><span class="line">        ListNode*pre = res;<span class="comment">//指针指向这个返回结点的初始位置</span></span><br><span class="line">        ListNode*cur = head;</span><br><span class="line">        <span class="comment">//当当前节点不为空，且当前结点的next不为空时    必须写cur != nullptr</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>&amp;&amp;cur-&gt;next!=<span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//如果有重复元素  让cur指向最后一个  </span></span><br><span class="line">            <span class="comment">//无重复元素   cur指向的则是可以保留下来的元素</span></span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>&amp;&amp;cur-&gt;val == cur-&gt;next-&gt;val)cur = cur-&gt;next;</span><br><span class="line">            <span class="comment">//如果pre-&gt;next不是cur说明其中有重复元素   让其指向cur-&gt;next即可</span></span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;next != cur) pre-&gt;next = cur-&gt;next;</span><br><span class="line">            <span class="comment">//如果pre-&gt;next指向cur说明其中无重复元素  pre后移即可</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;next == cur)pre = pre-&gt;next;</span><br><span class="line">            <span class="comment">//当前结点指针指向的是重复元素中的最后一个元素  所以指针再后移一次</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Linkedlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找峰值</title>
      <link href="/2021/11/24/%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
      <url>/2021/11/24/%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="寻找峰值"><a href="#寻找峰值" class="headerlink" title="寻找峰值"></a>寻找峰值</h1><p>题目描述：峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p><p>且元素各不相同</p><p>你可以假设 nums[-1] = nums[n] = -∞ 。</p><p>你必须实现时间复杂度为 O(log n) 的算法来解决此问题</p><blockquote><p>解题思路：首先在已知条件中 nums[-1] = nums[n] = -∞</p><p>所以说明峰值是必然存在的，要么索引为0要么索引为nums.size()</p><p>介于本题只需要返回一个峰值的索引，所以可以使用二分查找的方法来查找索引</p><p>最重要的就是确定判断条件: nums[mid] 和nums[mid+1]进行比较</p><p>如果nums[mid] &gt; nums[mid+1],则在<strong>左</strong>半部分一定可以找到峰值，则可以确定的是mid一定比mid+1大，再以mid作为right去左半部分查找，不断缩小范围，直到只剩下两个数的时候；如果此时的mid-1&lt;mid则mid就是峰值，否则mid-1便是峰值</p><p>如果nums[mid] &lt; nums[mid+1],则在<strong>右</strong>半部分一定可以找到峰值</p></blockquote><p>总结：峰值就是左右相邻的两个元素均小于中间这个值   那么就可以以这个作为判断条件</p><p>中间值设为mid   mid&gt;mid+1 时就去左边查找      mid&lt;mid+1时就去右边查找     不断缩小范围一定可以查找到峰值</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：3 是峰值元素，你的函数应该返回其索引 2。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//题述可得左右边界为负无穷</span></span><br><span class="line">        <span class="comment">//峰值必然存在</span></span><br><span class="line">        <span class="comment">//只用返回一个峰值便可以来利用二分查找来做</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//如果nums[mid]&gt;nums[mid+1],在左半部分一定有峰值</span></span><br><span class="line">            <span class="comment">//最坏的情况：numd[mid] = nums[0] 且已知nums[mid]&gt;nums[mid+1]和nums[-1]=负无穷</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[mid+<span class="number">1</span>]) right = mid;</span><br><span class="line">            <span class="comment">//如果nums[mid]&lt;nums[mid+1],向右边递推</span></span><br><span class="line">            <span class="comment">//同理最差情况nums[nums.size()]是峰值</span></span><br><span class="line">            <span class="comment">//小于mid+1的时候mid肯定不能成为峰值 left = mid +1</span></span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找元素在数组中首次和末次出现的位置</title>
      <link href="/2021/11/19/%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E9%A6%96%E6%AC%A1%E5%92%8C%E6%9C%AB%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
      <url>/2021/11/19/%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E9%A6%96%E6%AC%A1%E5%92%8C%E6%9C%AB%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</strong></p><p><strong>如果数组中不存在目标值 target，返回 [-1, -1]。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index2;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">vec</span>(<span class="number">2</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">return</span> vec;</span><br><span class="line">        <span class="comment">//由右侧逼近  在numd[mid]==target时 改变right left位置不变</span></span><br><span class="line">        <span class="comment">//right的位置最终会偏移到最左侧的target（即目标元素的第一个位置）</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] == target) &#123;</span><br><span class="line">            index1 = left;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//找右边界的值的时候  由左侧逼近；即nums[mid] == target的时候 改变left right不变</span></span><br><span class="line">        <span class="comment">//left的位置最终会偏移到最右侧的target（即目标元素的最后一个位置）</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &gt;= nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index1 != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//在找右边界的时候 由于每次left = mid+1 可能会越界 </span></span><br><span class="line">            <span class="comment">//设定right = nums.size(), index2 = right-1;</span></span><br><span class="line">            index2 = right <span class="number">-1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           index2 = index1;</span><br><span class="line">       &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(index1);</span><br><span class="line">        res.<span class="built_in">push_back</span>(index2);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下结束进程</title>
      <link href="/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/1636532289250.png" alt="1636532289250"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanguageStudy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

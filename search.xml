<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>object-c语法学习</title>
      <link href="/2021/11/28/Objective-c/"/>
      <url>/2021/11/28/Objective-c/</url>
      
        <content type="html"><![CDATA[<h1 id="OC基本语法学习"><a href="#OC基本语法学习" class="headerlink" title="OC基本语法学习"></a>OC基本语法学习</h1><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h2><p>char、int、float、double、<strong>BOOL（YES\NO）</strong></p><p>nil代表空值</p><p>在oc中的关键字添加@来区别</p><p>防止类名相同的情况通过添加前缀来解决：如NSString</p><p>输出方法：NSLog(@”hello”)或者NSLog(@”age is %i”,int)</p><blockquote><p>#import &lt;&gt; :引用系统文件，它用于对系统自带文件的引用，编译器会在系统文件目录下去查找该文件</p><p>#import “ “:引用用户自定义的文件，会先在用户目录下查找，再到安装目录去查找</p><p>使用#import有效地防止了头文件被重复引用；</p><p>而重复引用地后果可能是效率低下更严重者可能引起错误</p><p>比如相同地类不能定义两次</p></blockquote><h2 id="2-创建类"><a href="#2-创建类" class="headerlink" title="2.创建类"></a>2.创建类</h2><p>声明：Student.h</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;//Foundatiooon内部的Foundation.h文件</span><br><span class="line">@interface Student : NSObject &#123;</span><br><span class="line">    //定义成员变量</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line">//age的get方法</span><br><span class="line">//在此处声明的方法都是公有方法</span><br><span class="line">//用类名调用的静态方法 +</span><br><span class="line">//用对象调动的动态方法 -</span><br><span class="line">- (int)getAge;</span><br><span class="line">//一个冒号对应一个参数</span><br><span class="line">- (void)setAge:(int)newAge;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><hr><p>实现：Student.m</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;Student.h&quot;</span><br><span class="line">@implementation Student</span><br><span class="line">- (int)getAge &#123;</span><br><span class="line">    return age;//成员变量</span><br><span class="line">&#125;</span><br><span class="line">- (void)setAge:(int)newAge &#123;</span><br><span class="line">    //newAge是传进来的参数，设置成员变量中的age = 传进来的这个参数</span><br><span class="line">    age = newAge;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Student.h&quot;</span><br><span class="line">int main(int argc,const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        //创建一个Sudent对象</span><br><span class="line">        //1.调用一个静态方法alloc分配内存</span><br><span class="line">        Student* stu = [Student alloc];</span><br><span class="line">        //2.初始化 init动态方法</span><br><span class="line">        //发送init信号到stu所指向的内存区域进行初始化</span><br><span class="line">        stu = [stu init];</span><br><span class="line">        //合并的初始化方法</span><br><span class="line">        Student *stu = [[Student alloc] init];</span><br><span class="line">        //调用方法</span><br><span class="line">        [stu setage:100];</span><br><span class="line">        int age = [stu getAge];</span><br><span class="line">        //释放对象</span><br><span class="line">        [stu release];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数传参时两个参数的方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)setAge:(int)newAge andno:(int)newno;</span><br><span class="line"></span><br><span class="line">//实现</span><br><span class="line">- (void)setAge:(int)newAge andno:(int)newnp &#123;</span><br><span class="line">    age = newage;</span><br><span class="line">    no = newno;</span><br><span class="line">&#125;</span><br><span class="line">//主函数</span><br><span class="line">//调用这个方法</span><br><span class="line">[stu setage:15 andno:14]</span><br><span class="line">NSLog(@&quot;age is %i,no is %i&quot;,[stu getage],[stu getno]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Objective-c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Objective-c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中删除重复元素</title>
      <link href="/2021/11/26/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>/2021/11/26/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目描述： 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</p><p>返回同样按升序排列的结果链表。</p></blockquote><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,3,4,4,5]</span><br><span class="line">输出：[1,2,5]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//使用pre记录前一个需要被保留下来的元素  </span></span><br><span class="line">    <span class="comment">//使用cur记录当前元素</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)<span class="keyword">return</span> head;<span class="comment">//只有一个元素 或者链表为空</span></span><br><span class="line">        ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        res-&gt;next = head;<span class="comment">//返回结点</span></span><br><span class="line">        ListNode*pre = res;<span class="comment">//指针指向这个返回结点的初始位置</span></span><br><span class="line">        ListNode*cur = head;</span><br><span class="line">        <span class="comment">//当当前节点不为空，且当前结点的next不为空时    必须写cur != nullptr</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>&amp;&amp;cur-&gt;next!=<span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//如果有重复元素  让cur指向最后一个  </span></span><br><span class="line">            <span class="comment">//无重复元素   cur指向的则是可以保留下来的元素</span></span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>&amp;&amp;cur-&gt;val == cur-&gt;next-&gt;val)cur = cur-&gt;next;</span><br><span class="line">            <span class="comment">//如果pre-&gt;next不是cur说明其中有重复元素   让其指向cur-&gt;next即可</span></span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;next != cur) pre-&gt;next = cur-&gt;next;</span><br><span class="line">            <span class="comment">//如果pre-&gt;next指向cur说明其中无重复元素  pre后移即可</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pre-&gt;next == cur)pre = pre-&gt;next;</span><br><span class="line">            <span class="comment">//当前结点指针指向的是重复元素中的最后一个元素  所以指针再后移一次</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Linkedlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找峰值</title>
      <link href="/2021/11/24/%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
      <url>/2021/11/24/%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="寻找峰值"><a href="#寻找峰值" class="headerlink" title="寻找峰值"></a>寻找峰值</h1><p>题目描述：峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p><p>且元素各不相同</p><p>你可以假设 nums[-1] = nums[n] = -∞ 。</p><p>你必须实现时间复杂度为 O(log n) 的算法来解决此问题</p><blockquote><p>解题思路：首先在已知条件中 nums[-1] = nums[n] = -∞</p><p>所以说明峰值是必然存在的，要么索引为0要么索引为nums.size()</p><p>介于本题只需要返回一个峰值的索引，所以可以使用二分查找的方法来查找索引</p><p>最重要的就是确定判断条件: nums[mid] 和nums[mid+1]进行比较</p><p>如果nums[mid] &gt; nums[mid+1],则在<strong>左</strong>半部分一定可以找到峰值，则可以确定的是mid一定比mid+1大，再以mid作为right去左半部分查找，不断缩小范围，直到只剩下两个数的时候；如果此时的mid-1&lt;mid则mid就是峰值，否则mid-1便是峰值</p><p>如果nums[mid] &lt; nums[mid+1],则在<strong>右</strong>半部分一定可以找到峰值</p></blockquote><p>总结：峰值就是左右相邻的两个元素均小于中间这个值   那么就可以以这个作为判断条件</p><p>中间值设为mid   mid&gt;mid+1 时就去左边查找      mid&lt;mid+1时就去右边查找     不断缩小范围一定可以查找到峰值</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：3 是峰值元素，你的函数应该返回其索引 2。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//题述可得左右边界为负无穷</span></span><br><span class="line">        <span class="comment">//峰值必然存在</span></span><br><span class="line">        <span class="comment">//只用返回一个峰值便可以来利用二分查找来做</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//如果nums[mid]&gt;nums[mid+1],在左半部分一定有峰值</span></span><br><span class="line">            <span class="comment">//最坏的情况：numd[mid] = nums[0] 且已知nums[mid]&gt;nums[mid+1]和nums[-1]=负无穷</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[mid+<span class="number">1</span>]) right = mid;</span><br><span class="line">            <span class="comment">//如果nums[mid]&lt;nums[mid+1],向右边递推</span></span><br><span class="line">            <span class="comment">//同理最差情况nums[nums.size()]是峰值</span></span><br><span class="line">            <span class="comment">//小于mid+1的时候mid肯定不能成为峰值 left = mid +1</span></span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找元素在数组中首次和末次出现的位置</title>
      <link href="/2021/11/19/%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E9%A6%96%E6%AC%A1%E5%92%8C%E6%9C%AB%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
      <url>/2021/11/19/%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E9%A6%96%E6%AC%A1%E5%92%8C%E6%9C%AB%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</strong></p><p><strong>如果数组中不存在目标值 target，返回 [-1, -1]。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index2;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">vec</span>(<span class="number">2</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">return</span> vec;</span><br><span class="line">        <span class="comment">//由右侧逼近  在numd[mid]==target时 改变right left位置不变</span></span><br><span class="line">        <span class="comment">//right的位置最终会偏移到最左侧的target（即目标元素的第一个位置）</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt;= nums[mid]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] == target) &#123;</span><br><span class="line">            index1 = left;</span><br><span class="line">        &#125;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//找右边界的值的时候  由左侧逼近；即nums[mid] == target的时候 改变left right不变</span></span><br><span class="line">        <span class="comment">//left的位置最终会偏移到最右侧的target（即目标元素的最后一个位置）</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &gt;= nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index1 != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//在找右边界的时候 由于每次left = mid+1 可能会越界 </span></span><br><span class="line">            <span class="comment">//设定right = nums.size(), index2 = right-1;</span></span><br><span class="line">            index2 = right <span class="number">-1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           index2 = index1;</span><br><span class="line">       &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;res;</span><br><span class="line">        res.<span class="built_in">push_back</span>(index1);</span><br><span class="line">        res.<span class="built_in">push_back</span>(index2);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下结束进程</title>
      <link href="/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/10/windos%E4%B8%8B%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/1636532289250.png" alt="1636532289250"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanguageStudy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
